/*
CSE 5462 project 1
Nathan Turner 200229714
TCPD process
Usage: ./tcpd
*/

#include <stdio.h>
#include <sys/types.h>  
#include <sys/socket.h>  
#include <netinet/in.h>  
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include <linux/tcp.h>

//packet with sender enum and  message with length of message attached
struct packet{
	int sender; //1=ftpc, 2=ftps
	int len;
	char mesg[1000]; //1KB message
}pack;

struct buffer{
	char buff[64000]; //64kb messasge
	int start;
	int end;
	int full;
};

//global port number
int tcpd_port=8000;
int tcpd_remote_port=8010;
int troll_port=4000;
char *tcpds_ip="164.107.113.10";
int tot=0,tot2=0;


int main()
{
	int tcpd,tcpdr,tcpdt;
	char buff[1000];
	struct buffer outbuff;
	outbuff.start=0;
	outbuff.end=0;
	outbuff.full=0;

	//local tcpd socket
	tcpd=socket(AF_INET, SOCK_DGRAM, 0); //create socket
	if(tcpd<0){
		printf("error opening socket\n");
		exit(1);
	}

        tcpdr=socket(AF_INET, SOCK_DGRAM, 0); //create socket
        if(tcpdr<0){
                printf("error opening socket\n");
                exit(1);
        }

        tcpdt=socket(AF_INET, SOCK_DGRAM, 0); //create socket
        if(tcpdr<0){
                printf("error opening socket\n");
                exit(1);
        }

	//local socket information
	struct sockaddr_in tcpd_addr;
	tcpd_addr.sin_family=htons(AF_INET);
	tcpd_addr.sin_addr.s_addr=inet_addr("0");
	tcpd_addr.sin_port=htons(tcpd_port);
        //bind tcpd socket
        if(bind(tcpd,(struct sockaddr *)&tcpd_addr,sizeof(tcpd_addr))<0){
                printf("error on local socket binding\n");
                exit(1);
	}

   	//remote socket information
        struct sockaddr_in tcpdr_addr;
        tcpdr_addr.sin_family=AF_INET;
        tcpdr_addr.sin_addr.s_addr=INADDR_ANY;
        tcpdr_addr.sin_port=htons(tcpd_remote_port);
        //bind tcpd socket
        if(bind(tcpdr,(struct sockaddr *)&tcpdr_addr,sizeof(tcpdr_addr))<0){
                printf("error on remote socket binding\n");
                exit(1);
        }


	struct sockaddr_in cli;
	int len=sizeof(cli);
	struct {
		struct sockaddr_in header;
		struct tcphdr tcpHeader;
		char body[1000];
	} message;

	while(1){
	 	//read from socket
		int rcv=recvfrom(tcpd,(void *)&pack,sizeof(pack),0,(struct sockaddr *)&cli,&len);
		if(rcv<0){
			printf("error reading");
			exit(1);
		}

		//if package came from client		
		if(pack.sender==1){
		        //dest and troll information
       			struct sockaddr_in dest, troll;
		        
			//fill in server address information
       			message.header.sin_family=htons(AF_INET);
        		message.header.sin_addr.s_addr=inet_addr(tcpds_ip);
        		message.header.sin_port=htons(tcpd_remote_port);

			//fill in troll address information
			troll.sin_family = AF_INET;
        		troll.sin_addr.s_addr = inet_addr("0");
        		troll.sin_port = htons(troll_port);
			
			rcv-=2*sizeof(int);
			tot++;
			printf("package %d from client\n",tot);
			memcpy(message.body,pack.mesg,pack.len);


			//send message to troll
			if(outbuff.full){
				sendto(tcpdt, (char *)&message, sizeof(struct sockaddr_in)+sizeof(struct tcphdr)+pack.len, 0, (struct sockaddr *)&troll, sizeof(troll));
				outbuff.full=0;
			}
		}
		//if package from server
		else if(pack.sender==2){
	//		printf("request from server\n");
			//recieve from troll
			int read=recvfrom(tcpdr,(char *)&message,sizeof(struct sockaddr_in)+sizeof(struct tcphdr)+pack.len,0,(struct sockaddr *)&tcpdr_addr,&len);
			if(read<0){
				printf("error reading from troll\n");
				exit(1);
			}
			
			//send message to ftps
			read=read-sizeof(struct sockaddr_in)-sizeof(struct tcphdr);
			tot2++;


printf("package %d from troll\n",tot2);

			sendto(tcpd,message.body,read,0,(struct sockaddr *)&cli,len);
		}

	}

        close(tcpd);
	close(tcpdr);
	close(tcpdt);
	return 0;
}


